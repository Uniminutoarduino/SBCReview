#Before run the script, check the packages imported
#DOIs must be allocated in the file DOIs.txt
#Script generated in Python v3.8


import urllib3
import json
import codecs
import operator
import matplotlib.pyplot as plt
plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt
countpapers=0
#Block to read DOIs. DOIs are read from the file DOIs.txt
f=open('DOIs.txt','r') #Open file DOIs.txt
DOIS=f.readlines()
f.close()
dest = codecs.open('PapersType.txt',"w") #File for papers' type. This is generated by the script.
http = urllib3.PoolManager()
c=0
d=0
D=""
for p in DOIS:
    try:
        countpapers = countpapers + 1
        r = http.request('GET', 'https://api.crossref.org/works/' + p)
        data = json.loads(r.data.decode('utf-8'))
        print(str(countpapers) + ":" + str(data))
        Type=str(data['message']['type'])#Extract the type of publication by each paper.
        if Type=="book":
            Type="book-chapter"
        dest.write(str(Type))
        dest.write("\n")
        print(Type)
    except:
        print("Error")#IF Error, then assign type 'proceedings article'. It is the most common type in this case.
        dest.write("proceedings-article")
        dest.write("\n")
        print(Type)

dest.close() #Close file PapersType.txt
dest=open('PapersType.txt','r') #Open file Type txt to plot papers' type
message=dest.readlines()
dest.close()

#Block to get frequencies of article's type and order from minor to major
c=0
d=0
print (message)
print (type(message))
wordlist = message
dictionary={}
wordfreq = []
for w in wordlist:
    dictionary[w]=wordlist.count(w)
    wordfreq.append(wordlist.count(w))

print("List\n" + str(wordlist) + "\n")
print("Frequencies\n" + str(wordfreq) +str(wordlist)+ "\n")
sorted_d = sorted(dictionary.items(), key=operator.itemgetter(0))#
print (sorted_d)
MatplotList=[]
TypeList=[]
counter=0

#Data are organized from minor to major in the plot
for x in range(0,len(sorted_d)):
    TypeList.append(sorted_d[x][0])
    MatplotList.append(sorted_d[x][1])
    print((sorted_d[x][0]))
    print((sorted_d[x][1]))
    counter=counter+1
suma=0
for x, y in dictionary.items():
  suma=suma+int(y)

print (suma)
print(str(TypeList))
print(str(MatplotList))
fig, ax = plt.subplots()
objects = TypeList
y_pos = np.arange(len(objects))
performance = MatplotList

explode = (0, 0, 0.1)  # only "explode" the 2nd slice (i.e. 'Hogs')
ax.pie(MatplotList, explode=explode, labels=objects, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.title('Percentage of publications per type (2010-2020) [n='+str(len(message))+']\n') #Graph Title
plt.show()
